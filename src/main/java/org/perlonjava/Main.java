package org.perlonjava;

import org.perlonjava.runtime.ExceptionFormatter;
import org.perlonjava.scriptengine.PerlLanguageProvider;

import java.util.ArrayList;

import static org.perlonjava.runtime.ExceptionFormatter.findInnermostCause;

/**
 * The Main class serves as the entry point for the Perl-to-Java bytecode compiler and runtime
 * evaluator. It accepts the command-line arguments, parses Perl code, generates corresponding Java bytecode using ASM, and executes the
 * generated bytecode.
 */
public class Main {

    /**
     * The main method initializes the compilation and execution process.
     *
     * @param args Command-line arguments.
     */
    public static void main(String[] args) {
        ArgumentParser.CompilerOptions parsedArgs = ArgumentParser.parseArguments(args);

        if (parsedArgs.code == null) {
            System.err.println("No code provided. Use -e <code> or specify a filename.");
            System.exit(1);
        }

        try {
            PerlLanguageProvider.executePerlCode(parsedArgs);
        } catch (Throwable t) {
            // Print full JVM stack
            t.printStackTrace();

            // Use the custom formatter to print the Perl message and stack trace
            System.out.println();
            StringBuilder sb = new StringBuilder();

            Throwable innermostCause = findInnermostCause(t);
            String message = innermostCause.getMessage();
            sb.append(message);
            if (!message.endsWith("\n")) {
                sb.append("\n");
            }

            for (ArrayList<String> line : ExceptionFormatter.formatException(t)) {
                sb.append("        ").append(line.get(0)).append(" at ").append(line.get(1)).append(" line ").append(line.get(2)).append("\n");
            }
            System.out.println(sb);

            System.exit(1);
        }
    }
}

