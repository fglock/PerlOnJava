package org.perlonjava;

import org.perlonjava.runtime.ErrorMessageUtil;
import org.perlonjava.runtime.GlobalVariable;
import org.perlonjava.runtime.RuntimeScalar;
import org.perlonjava.scriptengine.PerlLanguageProvider;

import java.util.Locale;

/**
 * The Main class serves as the entry point for the Perl-to-Java bytecode compiler and runtime
 * evaluator. It accepts the command-line arguments, parses Perl code, generates corresponding Java bytecode using ASM, and executes the
 * generated bytecode.
 */
public class Main {

    static {
        // Set default locale to US (uses dot as decimal separator)
        Locale.setDefault(Locale.US);
    }

    /**
     * The main method initializes the compilation and execution process.
     *
     * @param args Command-line arguments.
     */
    public static void main(String[] args) {
        CompilerOptions parsedArgs = ArgumentParser.parseArguments(args);

        if (parsedArgs.code == null) {
            System.err.println("No code provided. Use -e <code> or specify a filename.");
            System.exit(1);
        }

        try {
            PerlLanguageProvider.executePerlCode(parsedArgs, true);

            if (parsedArgs.compileOnly) {
                System.out.println(parsedArgs.fileName + " syntax OK");
            }
        } catch (Throwable t) {
            if (parsedArgs.debugEnabled) {
                // Print full JVM stack
                t.printStackTrace();
                System.out.println();
            }

            String errorMessage = ErrorMessageUtil.stringifyException(t);
            System.out.println(errorMessage);

            // Implement Perl's exit code logic based on $! and $?
            // exit $! if $!;              # errno
            // exit $? >> 8 if $? >> 8;    # child exit status
            // exit 255;                   # last resort

            RuntimeScalar errno = GlobalVariable.getGlobalVariable("main::!");
            RuntimeScalar childStatus = GlobalVariable.getGlobalVariable("main::?");

            if (errno.getInt() != 0) {
                System.exit(errno.getInt());
            }

            int exitStatus = childStatus.getInt() >> 8;
            if (exitStatus != 0) {
                System.exit(exitStatus);
            }

            // Last resort
            System.exit(255);
        }
    }

}

