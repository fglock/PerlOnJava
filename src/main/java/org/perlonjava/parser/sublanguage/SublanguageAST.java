package org.perlonjava.parser.sublanguage;

/**
 * Base interface for all sublanguage AST nodes.
 * 
 * This provides a common interface for AST nodes generated by sublanguage parsers.
 * Each sublanguage (regex, pack, sprintf, tr) will have its own AST node types
 * that implement this interface.
 * 
 * The AST approach provides several benefits:
 * - Semantic structure instead of string manipulation
 * - Easy transformation to different target formats
 * - Better validation and error reporting
 * - Reusability across different backends
 */
public interface SublanguageAST {
    
    /**
     * Accept a visitor for processing this AST node.
     * This enables the visitor pattern for AST traversal and transformation.
     * 
     * @param visitor The visitor to accept
     */
    void accept(SublanguageASTVisitor visitor);
    
    /**
     * Get the source position information for this AST node.
     * This is used for error reporting and debugging.
     * 
     * @return The source token that this AST node was created from
     */
    SublanguageToken getSourceToken();
    
    /**
     * Get a string representation of this AST node for debugging.
     * 
     * @return String representation of the AST structure
     */
    String toDebugString();
}
