This is a Perl compiler under development.

It compiles Perl into Java bytecode and runs it.


Compile:

javac -cp ./asm-9.7.jar:. *.java

Run:

java -cp ./asm-9.7.jar Main -e ' print 123 '


Modules

    Lexer and Parser:
        Lexer is used to split the code into symbols like space, identifier, operator.
        Parser picks up the symbols and organizes into an Abstract Syntax Tree of objects like block, subroutine.

    ClassWriter:
        ClassWriter is used to generate the bytecode for the class.
        The user code is translated into a method.
        The generated bytecode is loaded using a custom class loader.

    EmitterVisitor and EmitterContext:
        EmitterVisitor is used to generate the bytecode for the operations within the method.
        It traverses the AST and generates the corresponding ASM bytecode.
        EmitterContext holds the current state of the Symbol Table and calling context (void, scalar, etc)
        PrinterVisitor provides pretty-print stringification for the AST.

    AST Nodes: *Node
        Representations of AST nodes for code blocks, variable declarations and operations.

    Symbol Table:
        SymbolTable and ScopedSymbolTable manage variable names and their corresponding local variable indices.

    Runtime:
        Runtime provides the implementation of the behaviour of a Perl scalar variable.

    Main Method:
        The main method generates the bytecode for the program body.
        The generated method is loaded into a variable as a code reference and executed.


