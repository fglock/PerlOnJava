buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'se.patrikerdes.use-latest-versions' version '0.2.18'
    id 'application'
    id 'com.netflix.nebula.ospackage' version '11.4.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

application {
    mainClass = 'org.perlonjava.Main'
}

tasks.buildDeb {
    dependsOn installDist
}

ospackage {
    packageName = 'perlonjava'
    version = project.version
    maintainer = 'Flavio Soibelmann Glock <fglock@gmail.com>'
    requires('java-21-openjdk-headless')

    into '/opt/perlonjava'
    from('build/install/perlonjava') {
        into '/opt/perlonjava'
    }

    link('/usr/local/bin/jperl', '/opt/perlonjava/bin/jperl')
}

group = 'org.perlonjava'
version = '1.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.ow2.asm:asm:9.8'
    implementation 'org.ow2.asm:asm-util:9.8'
    implementation 'com.ibm.icu:icu4j:77.1'
    implementation 'com.alibaba.fastjson2:fastjson2:2.0.57'
    implementation 'org.snakeyaml:snakeyaml-engine:2.9'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.13.0-RC1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.13.0-RC1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.13.0-RC1'
}

testing {
    suites {
        test {
            useJUnitJupiter()
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << '-Xlint:-options'
    options.compilerArgs << '-Xlint:deprecation'
}

tasks.withType(Test).configureEach {
    jvmArgs += '--enable-native-access=ALL-UNNAMED'
}

allprojects {
    tasks.withType(JavaExec).configureEach {
        jvmArgs += '--enable-native-access=ALL-UNNAMED'
    }
}

test {
    useJUnitPlatform()
}

shadowJar {
    archiveClassifier.set('')
    destinationDirectory = file("$buildDir/../target")
    manifest {
        attributes 'Main-Class': 'org.perlonjava.Main'
    }
    exclude 'module-info.class'
    exclude 'META-INF/MANIFEST.MF'
}

tasks.named('build') {
    dependsOn shadowJar
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/perl'
            srcDir 'src/main/resources'
            include '**/*.pm'
            include 'META-INF/services/**'
        }
    }
    test {
        resources {
            srcDir 'src/test/resources'
        }
    }
}

tasks.named('processResources', Copy) {
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.pm'
        include 'META-INF/services/**'
    }
    into("$buildDir/resources/main")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named('processTestResources', Copy) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
