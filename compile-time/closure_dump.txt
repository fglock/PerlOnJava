BEGIN block code is instrumented to return references to the captured variables:

~~~perl
    sub Perlito5::Grammar::Block::eval_begin_block {
        my $block = shift;
        local ${'@'};
        my @data = $block->emit_perl5();
        my $out = [];
        Perlito5::Perl5::PrettyPrinter::pretty_print(\@data, 0, $out);
        my $code = 'package ' . $Perlito5::PKG_NAME . ';' . chr(10) . join('', @{$out}) . '; 1' . chr(10);
        local ${chr(7) . 'LOBAL_PHASE'};
        Perlito5::set_global_phase('BEGIN');

        print STDERR "[[ " . Perlito5::CompileTime::Dumper::generate_eval_string($code)   . " ]]\n";

        eval(Perlito5::CompileTime::Dumper::generate_eval_string($code)) or Perlito5::Compiler::error('Error in BEGIN block: ' . ${'@'})
    }
~~~

produces:

$ perl perlito5.pl -I src5/lib -Cperl5 -e ' BEGIN { my $m; $x = [ 34, sub { $m + 123 } ] } '

[[ {
    package main;
    {
        my $m;
        $x = [34, sub {
            @_ && ref($_[0]) eq "Perlito5::dump" && return {'$m' => \$m};
            @_ && ref($_[0]) eq 'Perlito5::dump' && return {'$m' => \$m};
            $m + 123
        }]
    }
    1
}
 ]]

use v5.10;
use feature 'say';

# Do not edit this file - Generated by Perlito5 9.021

$main::x = [34, do {
    my $m = \undef;
    sub {
        'DUMMY'
    }
}];
*main::_ = [];
{
    package main;
    undef()
}
;1

